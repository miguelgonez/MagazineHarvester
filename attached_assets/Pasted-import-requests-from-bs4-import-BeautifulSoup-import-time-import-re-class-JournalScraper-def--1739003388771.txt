import requests
from bs4 import BeautifulSoup
import time
import re

class JournalScraper:
    def __init__(self):
        self.headers = {
            'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36',
            'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8',
            'Accept-Language': 'es-ES,es;q=0.9,en;q=0.8',
            'Accept-Encoding': 'gzip, deflate, br',
            'Connection': 'keep-alive',
            'Upgrade-Insecure-Requests': '1'
        }
        self.session = requests.Session()

    def get_articles_from_url(self, url):
        try:
            # Asegurar URL completa
            if not url.startswith('http'):
                url = f'https://{url}'

            st.write(f"Accediendo a: {url}")  # Debug con Streamlit
            
            response = self.session.get(url, headers=self.headers)
            st.write(f"Status code: {response.status_code}")  # Debug con Streamlit
            
            if response.status_code != 200:
                st.error(f"Error en la respuesta HTTP: {response.status_code}")
                return []

            soup = BeautifulSoup(response.text, 'html.parser')
            articles = []

            # Encontrar todos los artículos con etiqueta "Open Access"
            for article_section in soup.find_all(['div', 'section'], {'class': lambda x: x and 'article' in x.lower()}):
                try:
                    # Buscar título y enlace
                    title_elem = article_section.find(['h1', 'h2', 'h3'])
                    title = title_elem.text.strip() if title_elem else None

                    # Buscar DOI
                    doi_text = article_section.find(text=re.compile(r'10\.22514/jofph\.\d{4}\.\d+'))
                    doi = doi_text.strip() if doi_text else None

                    # Buscar enlace PDF
                    pdf_elem = article_section.find('a', text='PDF')
                    pdf_url = None
                    if pdf_elem and pdf_elem.get('href'):
                        pdf_url = pdf_elem['href']
                        if not pdf_url.startswith('http'):
                            pdf_url = f"https://www.jofph.com{pdf_url}"

                    # Extraer volumen e issue de la URL
                    url_parts = url.split('/')[-1].split('-')
                    volume = int(url_parts[0].replace('articles/', ''))
                    issue = int(url_parts[1]) if len(url_parts) > 1 else 1

                    if title and pdf_url:
                        article_info = {
                            'title': title,
                            'doi': doi,
                            'pdf_url': pdf_url,
                            'volume': volume,
                            'issue': issue
                        }
                        articles.append(article_info)
                        st.write(f"Artículo encontrado: {title}")  # Debug con Streamlit

                except Exception as e:
                    st.write(f"Error procesando artículo: {str(e)}")  # Debug con Streamlit
                    continue

            st.write(f"Total artículos encontrados: {len(articles)}")  # Debug con Streamlit
            return articles

        except Exception as e:
            st.error(f"Error en get_articles_from_url: {str(e)}")  # Debug con Streamlit
            raise

    def download_pdf(self, pdf_url, filepath):
        try:
            response = self.session.get(pdf_url, headers=self.headers, stream=True)
            response.raise_for_status()
            
            with open(filepath, 'wb') as f:
                for chunk in response.iter_content(chunk_size=8192):
                    if chunk:
                        f.write(chunk)
            return True
        except Exception as e:
            st.error(f"Error descargando PDF: {str(e)}")  # Debug con Streamlit
            return False